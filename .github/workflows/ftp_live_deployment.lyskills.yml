name: Lyskills Deployment

on:
  push:
    branches:
      - master  # Only trigger when pushing to the 'master' branch
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Choose deploy type'
        required: true
        default: 'normal'
        type: choice
        options:
          - docker
          - normal

permissions:
  contents: write  # Allows the workflow to push changes
  actions: read    # Allows reading action logs
  pull-requests: write  # Enables PR creation and updates

jobs:
  # test_condition:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Debug deploy_type input
  #       run: echo "Deploy Type: ${{ github.event.inputs.deploy_type }}"

  docker-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_type == 'docker' }}
    strategy:
      fail-fast: true
      matrix:
        php: [8.1]  # You can add more PHP versions in the future if needed
        commit_msg: ["Fixes coding style"]
        container: ["/lyskills-app"]
        app: ["lyskills-app"]
        server_path: ["/home/nomilyskills/public_html"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@21e092a3e0c2fabb77bf641337eced34a4bcd3cc
        with:
          php-version: ${{ matrix.php }}
          extensions: json, dom, curl, libxml, mbstring, bz2, fileinfo, gd, gettext, mbstring, exif, mysqli, pdo_mysql
          tools: pint:1.16.1, phpdoc, composer:2.4.4
          coverage: none

      - name: Run Pint for code styling
        run: pint --config pint.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}${{ matrix.container }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}${{ matrix.container }}:latest

      - name: SSH to server and deploy Docker image
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SERVER_IP }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            # Log into Docker Hub on the remote server
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            # Pull the latest image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}${{ matrix.container }}:latest

            # Stop and remove the existing container
            docker stop ${{ matrix.app }} || true
            docker rm ${{ matrix.app }} || true

            # Run the new container with the latest image
            docker run -d --name ${{ matrix.app }} -p 80:80 ${{ secrets.DOCKER_USERNAME }}${{ matrix.container }}:latest

      - name: Build and start Docker containers
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Stop Docker containers
        run: |
          docker-compose down

  laravel-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 1200
    strategy:
      fail-fast: true
      matrix:
        php: [8.1]  # You can add more PHP versions in the future if needed
        commit_msg: ["Fixes coding style"]
        server_path: ["/home/nomilyskills/public_html"]
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the entire repository history

      - name: Setup PHP
        uses: shivammathur/setup-php@21e092a3e0c2fabb77bf641337eced34a4bcd3cc
        with:
          php-version: ${{ matrix.php }}
          extensions: json, dom, curl, libxml, mbstring, bz2, fileinfo, gd, gettext, mbstring, exif, mysqli, pdo_mysql
          tools: pint:1.16.1, phpdoc, composer:2.4.4
          coverage: none

      - name: Set up Environment File
        run: |
          cp .env.testing.example .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env


      - name: Run Pint for code styling
        run: pint --config pint.json

      - name: Creating essential directoires
        run: |
          sudo mkdir -p $GITHUB_WORKSPACE/storage/app 
          sudo mkdir -p $GITHUB_WORKSPACE/storage/framework/cache
          sudo mkdir -p $GITHUB_WORKSPACE/storage/framework/sessions 
          sudo mkdir -p $GITHUB_WORKSPACE/storage/framework/views
          sudo mkdir -p $GITHUB_WORKSPACE/storage/logs

      - name: Show file structure
        run: ls -l $GITHUB_WORKSPACE

      - name: installing composer
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-cache

      - name: Running migrations Tests
        run: yes | php artisan migrate --force

      - name: Running Cache
        run: |
          php artisan cache:clear && php artisan config:clear && php artisan route:clear
          php artisan view:clear && php artisan event:clear && php artisan clear-compiled
          php artisan optimize:clear
          php artisan cache:forget spatie.permission.cache

      - name: Checking Laravel Health
        run: php artisan health:check --no-notification

      - name: Run Tests
        run: APP_ENV=testing php artisan test
        continue-on-error: true  # âœ… Allows pipeline to continue even if tests fail

      # - name: Sync files to server via FTP
      #   uses: SamKirkland/FTP-Deploy-Action@8e83cea8672e3fbcbb9fdafff34debf6ae4c5f65
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     username: ${{ secrets.FTP_USERNAME }}
      #     password: ${{ secrets.FTP_PASS }}
      #     server-dir: /
      #     log-level: verbose
      #     timeout: 60000000
      #     port: 21
      #     # passive: true  # Use passive mode to avoid unexpected disconnects
      #     protocol: ftps
      #     exclude: |
      #       **/.git*
      #       **/.git*/**
      #       **/node_modules/**
      #       **/vendor/**

      # - name: Deploy to Staging server
      #   uses: easingthemes/ssh-deploy@a1aa0b6cf96ce2406eef90faa35007a4a7bf0ac0
      #   with:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     ARGS: "-rlgoDzvc -i"
      #     SOURCE: "/"
      #     REMOTE_HOST: ${{ secrets.SERVER_IP }}
      #     REMOTE_USER: ${{ secrets.SSH_USERNAME }}
      #     TARGET: /
      #     EXCLUDE: "/dist/, /node_modules/ , /.git, /vendor/"
          # SCRIPT_BEFORE: |
          #   whoami
          # SCRIPT_AFTER_REQUIRED: true
          # SCRIPT_AFTER: |
          #   cd ${{ matrix.server_path }} &&
          #   sudo chmod -R 775 ${{ matrix.server_path }}/server_deploy.sh &&
          #   sudo chown -R root:root ${{ matrix.server_path }}/server_deploy.sh &&
          #   ./server_deploy.sh
      # Step 5: Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 6: Add remote server to known hosts
      - name: Add remote server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      # Step 6: Deploy using rsync
      - name: Deploy using rsync
        run: |
          rsync -avz --delete --exclude='.env' \
            --exclude='.env.testing' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./ "${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }}:${{ matrix.server_path }}/"
          

      - name: Run server-side deployment script
        uses: appleboy/ssh-action@9817ef4a1793d4009d854d26cfb0ba4b615d5791
        with:
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SERVER_IP }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ${{ matrix.server_path }} &&
            sudo chmod -R 775 ${{ matrix.server_path }}/server_deploy.sh &&
            sudo chown -R root:root ${{ matrix.server_path }}/server_deploy.sh &&
            ./server_deploy.sh

